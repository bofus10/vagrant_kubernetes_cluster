---
- hosts: all
  become: yes
  tasks:

   - name: install libselinux
     yum:
       state: present
       update_cache: true
       name: 
        - libselinux-python
        - python3

   - name: disable SELinux
     command: setenforce 0
     
   - name: disable SELinux on reboot
     selinux:
       state: disabled

   - name: Stop and Disable Firewalld
     service:
       name: firewalld
       state: stopped
       enabled: no

   - name: Ensure br_netfilter is enabled.
     modprobe:
      name: br_netfilter
      state: present    

   - name: ensure net.bridge.bridge-nf-call-ip6tables is set to 1
     sysctl:
      name: net.bridge.bridge-nf-call-ip6tables
      value: 1
      state: present

   - name: ensure net.bridge.bridge-nf-call-iptables is set to 1
     sysctl:
      name: net.bridge.bridge-nf-call-iptables
      value: 1
      state: present
   
   - name: ensure net.ipv4.ip_forward is set to 1
     sysctl:
      name: net.ipv4.ip_forward
      value: 1
      state: present

   # K8s requirement swapoff
   - name: Remove swapfile from /etc/fstab
     mount:
       name: "{{ item }}"
       fstype: swap
       state: absent
     with_items:
      - swap
      - none

   - name: Disable swap
     command: swapoff -a
     when: ansible_swaptotal_mb > 0

   - name: install Docker and Registry
     yum:
       state: present
       update_cache: true
       name: 
         - docker
         - docker-distribution

   - name: start Docker
     service:
       name: docker
       state: started
       enabled: yes

   - name: start Docker Registry
     service:
       name: docker-distribution
       state: started
       enabled: yes
 
   - name: Create group
     group:
      name: docker
      state: present
   
   - name: Add vagrant user to docker group
     user:
      name: vagrant
      group: docker

   - name: Load vars from /etc/docker/daemon.json
     include_vars:
        file: /etc/docker/daemon.json
        name: imported_var

   - name: append {{ hostname }} local registry
     set_fact:
        imported_var: "{{ imported_var | default([]) | combine({ 'insecure-registries': ['{{ hostname }}:5000'] }) }}"

   - name: write var to /etc/docker/daemon.json
     copy:
        content: "{{ imported_var | to_nice_json }}"
        dest: /etc/docker/daemon.json

   - name: add Kubernetes' YUM repository
     yum_repository:
      name: Kubernetes
      description: Kubernetes YUM repository
      baseurl: https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
      gpgkey: https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
      gpgcheck: yes

   
   - name: Install K8s Components
     yum:
      state: present
      update_cache: true
      allow_downgrade: yes
      name:
      - kubelet-1.21.0
      - kubeadm-1.21.0
      - kubectl-1.21.0

   - name: start kubelet
     service:
       name: kubelet
       enabled: yes
       state: started  

   - name: Configure node-ip {{ node_ip }} at kubelet
     lineinfile:
       path: '/usr/lib/systemd/system/kubelet.service.d/10-kubeadm.conf' #Fix location
       line: '\1 --node-ip={{ node_ip }}"'
       regexp: '(Environment="KUBELET_CONFIG_ARGS=.*)"'
       backrefs: yes
     notify: restart kubelet      

   - name: Add k8s Master to /etc/hosts
     lineinfile:
      path: /etc/hosts
      line: "{{ item }}"
      insertafter: EOF
     with_items:
      - '{{ network }}.10 {{ hostname }}.example.com {{ hostname }}'

   - name: Add Nodes to /etc/hosts
     lineinfile:
       path: /etc/hosts
       line: '{{ network }}.{{ 10|default(0)|int + item|int }} node-{{ item|int }}.example.com node-{{ item|int }}'
       insertafter: EOF
     loop: "{{ query('sequence', 'start=1 end='+(n_nodes)|string)|list }}"

   - name: Pull Containers
     command: kubeadm config images pull

   - name: Initialize the Kubernetes cluster using kubeadm
     command: kubeadm init --apiserver-advertise-address="{{ node_ip }}" --pod-network-cidr=192.168.0.0/16
    
   - name: Setup kubeconfig for vagrant user
     command: "{{ item }}"
     with_items:
      - mkdir -p /home/vagrant/.kube
      - cp -i /etc/kubernetes/admin.conf /home/vagrant/.kube/config
      - chown vagrant:vagrant /home/vagrant/.kube/config  

   - name: Install calico CNI
     command: kubectl --kubeconfig=/etc/kubernetes/admin.conf create -f https://docs.projectcalico.org/v3.18/manifests/calico.yaml

   - name: Generate join command
     command: kubeadm token create --print-join-command
     register: join_command

   - name: Copy join command to local file
     local_action: copy content="{{ join_command.stdout_lines[0] }}" dest="/vagrant/join-command"
 
   - name: Deploy MetalLB Namespace LoadBalancer for K8s
     become: false
     command: kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.10.2/manifests/namespace.yaml

   - name: Deploy MetalLB LoadBalancer for K8s
     become: false
     command: kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.10.2/manifests/metallb.yaml

   - name: Deploy ConfigMaps MetalLB
     become: false
     shell: |
       cat <<EOF | kubectl create -f -
       ---
       apiVersion: v1
       kind: ConfigMap
       metadata:
         namespace: metallb-system
         name: config
       data:
         config: |
           address-pools:
           - name: default
             protocol: layer2
             addresses:
             - {{ network }}.240-{{ network }}.250
       EOF

   - name: Create cron job to launch pod deployment
     cron: 
       name: "Second Phase"
       user: "vagrant"
       minute: "*/5"
       job: "[ -f /vagrant/nodes ] && [ $(wc -l /vagrant/nodes | awk '{print $1}') -eq \"{{ n_nodes }}\" ] && /usr/bin/ansible-playbook /vagrant/second_phase.yml --extra-vars \"network={{ network }}\" >/vagrant/graf 2>&1"

   - name: Taint nodes
     become: false
     command: kubectl taint nodes --all node-role.kubernetes.io/master-

  handlers:
    - name: docker status
      service: name=docker state=started  
    
    - name: restart kubelet
      service:
       name: kubelet
       state: restarted
       daemon_reload: yes