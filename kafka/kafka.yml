---
apiVersion: v1
items:
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      app: zookeeper-1
    name: zoo1
    namespace: kafka
  spec:
    internalTrafficPolicy: Cluster
    ports:
    - name: client
      port: 2181
      protocol: TCP
      targetPort: 2181
    - name: follower
      port: 2888
      protocol: TCP
      targetPort: 2888
    - name: leader
      port: 3888
      protocol: TCP
      targetPort: 3888
    selector:
      app: zookeeper-1
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

  
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    labels:
      name: kafka
    name: kafka-service
    namespace: kafka
  spec:
    internalTrafficPolicy: Cluster
    ports:
    - name: kafka-port
      port: 9092
      protocol: TCP
      targetPort: 9092
    selector:
      app: kafka
      id: "0"
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

  
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    creationTimestamp: null
    labels:
      app: zookeeper-1
    name: zookeeper-deployment-1
    namespace: kafka
  spec:
    progressDeadlineSeconds: 2147483647
    replicas: 1
    revisionHistoryLimit: 2147483647
    selector:
      matchLabels:
        app: zookeeper-1
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: zookeeper-1
      spec:
        containers:
        - env:
          - name: ZOOKEEPER_ID
            value: "1"
          - name: ZOOKEEPER_SERVER_1
            value: zoo1
          image: digitalwonderland/zookeeper
          imagePullPolicy: Always
          name: zoo1
          ports:
          - containerPort: 2181
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status: {}


- apiVersion: apps/v1
  kind: Deployment
  metadata:
    creationTimestamp: null
    labels:
      app: kafka
      id: "0"
    name: kafka-broker0
    namespace: kafka
  spec:
    progressDeadlineSeconds: 2147483647
    replicas: 1
    revisionHistoryLimit: 2147483647
    selector:
      matchLabels:
        app: kafka
        id: "0"
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kafka
          id: "0"
      spec:
        containers:
        - env:
          - name: KAFKA_ADVERTISED_PORT
            value: "9092"
          - name: KAFKA_ADVERTISED_HOST_NAME
            value: kafka-service
          - name: KAFKA_ZOOKEEPER_CONNECT
            value: zoo1:2181
          - name: KAFKA_BROKER_ID
            value: "0"
          - name: KAFKA_OPTS
            value: '-javaagent:/usr/app/jmx_prometheus_javaagent.jar=7075:/usr/app/prom-jmx-agent-config.yml'
          - name: KAFKA_CREATE_TOPICS
            value: input:1:1,output:1:1
          image: k8s-master:5000/kafka-prome:latest
          imagePullPolicy: IfNotPresent
          name: kafka-prome
          ports:
          - containerPort: 9092
            protocol: TCP
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status: {}



- apiVersion: apps/v1
  kind: Deployment
  metadata:
    creationTimestamp: null
    labels:
      app: kafka-cat
    name: kafka-cat
    namespace: kafka
  spec:
    progressDeadlineSeconds: 2147483647
    replicas: 1
    revisionHistoryLimit: 2147483647
    selector:
      matchLabels:
        app: kafka-cat
    strategy:
      rollingUpdate:
        maxSurge: 1
        maxUnavailable: 1
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app: kafka-cat
      spec:
        containers:
        - args:
          - -c
          - 'trap : TERM INT; sleep infinity & wait'
          command:
          - /bin/sh
          image: confluentinc/cp-kafkacat
          imagePullPolicy: Always
          name: kafka-cat
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
  status: {}
kind: List
metadata: {}